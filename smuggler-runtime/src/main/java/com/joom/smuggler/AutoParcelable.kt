package com.joom.smuggler

import android.os.Parcel
import android.os.Parcelable
import java.lang.reflect.Modifier
import java.util.IdentityHashMap

interface AutoParcelable : Parcelable {
  companion object {
    private val CREATORS = IdentityHashMap<Class<*>, Parcelable.Creator<*>>()

    inline fun <reified S : Parcelable> creator(): Parcelable.Creator<S> {
      return creator(S::class.java)
    }

    @Suppress("UNCHECKED_CAST")
    fun <S : Parcelable> creator(clazz: Class<S>): Parcelable.Creator<S> {
      return synchronized(CREATORS) {
        CREATORS.getOrPut(clazz) {
          val creator = try {
            clazz.getField("CREATOR")
          } catch (exception: NoSuchFieldException) {
            throw AssertionError("Parcelable protocol requires a Parcelable.Creator object called CREATOR on class ${clazz.name}")
          }

          if (!Modifier.isStatic(creator.modifiers)) {
            throw AssertionError("Parcelable protocol requires the CREATOR object to be static on class ${clazz.name}")
          }

          if (!Modifier.isPublic(creator.modifiers)) {
            throw AssertionError("Parcelable protocol requires the CREATOR object to be public on class ${clazz.name}")
          }

          if (!Parcelable.Creator::class.java.isAssignableFrom(creator.type)) {
            throw AssertionError("Parcelable protocol requires a Parcelable.Creator object called CREATOR on class ${clazz.name}")
          }

          creator.get(null) as Parcelable.Creator<*>
        }
      } as Parcelable.Creator<S>
    }
  }

  override fun writeToParcel(parcel: Parcel, flags: Int) {
    throw UnsupportedOperationException("This method will never be used in runtime. The real implementation will be generated by smuggler plugin.")
  }

  override fun describeContents(): Int {
    throw UnsupportedOperationException("This method will never be used in runtime. The real implementation will be generated by smuggler plugin.")
  }
}
